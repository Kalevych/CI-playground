# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  
 desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

 desc "Initialize telegram credentials"
  lane :set_telegram_creds do |options|
    ENV["TELEGRAM_TOKEN"] = options[:token]
    ENV["TELEGRAM_CHAT_ID"] = options[:chat_id]
  end

  desc "assemble_build"
  lane :assemble_build do
    gradle(task: "assembleDebug")
    telegramMessage("build successful")
  end

  error do |lane, exception|
    telegramMessage("build failed")
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(task: "clean assembleRelease")
    upload_to_play_store
  end

  desc "Assemble Test Application"
  lane :assemble_test_application do 
    gradle(task: "assembleDebugAndroidTest")
  end

  desc "Assemble Build and Test Application"
  lane :assemble_with_instrument_tests do 
    assemble_build
    assemble_test_application
    sh("../run_firebase_tests.sh")
  end

  desc "My awesome app"
  lane :distribute_firebase do |options|

      firebase_app_distribution(
          app: "roomsample-51434",
          firebase_cli_token: "#{options[:firebase_token]}",
          apk_path: "./app/build/outputs/apk/debug/app-debug.apk",
          testers: "oleksandr.kalevych@gmail.com, oleksandr.kalevych@uptech.team"
          release_notes: "Lots of amazing new features to test out!"
      )

    end


  def telegramMessage(message)
    require 'net/http'

    uri = URI.parse("https://api.telegram.org/bot#{ENV["TELEGRAM_TOKEN"]}/sendMessage")
    response = Net::HTTP.post_form(uri, {:chat_id => ENV["TELEGRAM_CHAT_ID"], :text => message, :parse_mode => "HTML"})
  end

end
